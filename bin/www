#!/usr/bin/env node
/**
 * Module dependencies.
 */
const config = require("../config");
const program = require('commander');
const fu = require('../server/persistence');
const debug = require('debug')('the-hydra-eye-js:server');
resolve = require('path').resolve
const pjson = require('../package.json');

program
    .version(pjson.version, '-v, --version')
    .option('-e, --eye <eye_path>', 'Path to the eye reasoner', config.defaultEyeOptions.eyePath)
    .option('--verbose', 'verbose mode');

program
    .command('serve <directory>')
    .description('start a server')
    .option('-a, --app <app_entrypoint>', 'API entrypoint', config.serverOptions.appEntrypoint)
    .option('-p, --port <port>', 'server port', config.serverOptions.port)
    .action(function(directory, options){
        let absolutePath = resolve(directory);

        // Check directory
        if (fu.exists(absolutePath)){
            console.log('Starting Hydra eye server\n');
            config.serverOptions.eyePath = program.eye;
            config.serverOptions.port = options.port;
            config.serverOptions.appEntrypoint = options.app;
            config.serverOptions.workSpacePath = absolutePath;
            config.serverOptions.verbose = program.verbose;
            console.log('Workspace: [%s]\nRoot :%s',config.serverOptions.workSpacePath, JSON.stringify(fu.readDir(config.serverOptions.workSpacePath), 2));
            serve();
        } else {
            console.error("Cannot open directory [%s]",directory);
        }
    });

program
    .command('*')
    .action(function(command){
        console.log('command %s not recognized (hes --help)',command);
    });

if (!process.argv.slice(2).length) {
    program.outputHelp();
}

program.parse(process.argv);

// Only call when the config is set up
function serve(){

    let app = require('../server/app');
    let http = require('http');
    let reasoner = require('../server/reasoning');

    let currentOptions = config.serverOptions;

    reasoner.invokeEye(currentOptions.eyePath + " --version")
        .then(function (result) {
            console.log(result.stderr);

            /**
             * Get port from environment and store in Express.
             */
            let port = normalizePort(currentOptions.port);
            app.set('port', port);

            /**
             * Create HTTP server.
             */

            let server = http.createServer(app);

            /**
             * Listen on provided port, on all network interfaces.
             */
            server.listen(port);
            server.on('error', onError);
            server.on('listening', onListening);


            /**
             * Normalize a port into a number, string, or false.
             */
            function normalizePort(val) {
                let port = parseInt(val, 10);
                if (isNaN(port)) {
                    // named pipe
                    return val;
                }
                if (port >= 0) {
                    // port number
                    return port;
                }
                return false;
            }

            /**
             * Event listener for HTTP server "error" event.
             */

            function onError(error) {
                if (error.syscall !== 'listen') {
                    throw error;
                }
                let bind = typeof port === 'string'
                    ? 'Pipe ' + port
                    : 'Port ' + port;
                // handle specific listen errors with friendly messages
                switch (error.code) {
                    case 'EACCES':
                        console.error(bind + ' requires elevated privileges');
                        process.exit(1);
                        break;
                    case 'EADDRINUSE':
                        console.error(bind + ' is already in use');
                        process.exit(1);
                        break;
                    default:
                        throw error;
                }
            }

            /**
             * Event listener for HTTP server "listening" event.
             */

            function onListening() {
                let addr = server.address();
                let bind = typeof addr === 'string'
                    ? 'pipe ' + addr
                    : 'port ' + addr.port;
                debug('Listening on ' + bind);
            }

        })
        .catch(function (error) {
            console.error("ERROR: could not start the reasoner [EYE_PATH:%s]", config.eyePath);
            console.error(error)
        });

}