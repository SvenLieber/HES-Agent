#!/usr/bin/env node
/**
 * Module dependencies.
 */

const defaultConfig = require("../config");


const program = require('commander');
const fu = require('../server/persistence');
const pjson = require('../package.json');
const fs = require('fs-extra')
const path = require('path');
const DSL_V1 = require('../server/dsl_v1');
const Context = require('../server/Context');

program
    .version(pjson.version, '-v, --version')
    .option('-e, --eye <eye_path>', 'Path to the eye reasoner', defaultConfig.eyeOptions.eyePath)
    .option('--verbose', 'verbose mode');

program
    .command('serve <directory>')
    .description('start a server')
    .option('-a, --app <app_entrypoint>', 'API entrypoint', defaultConfig.serverOptions.appEntrypoint)
    .option('-p, --port <port>', 'server port', defaultConfig.serverOptions.port)
    .option('-u, --uriqa <port>', 'URIQA', undefined)

    .action(function(directory, options){
        let absolutePath = path.resolve(directory);
        // Check directory
        if (fu.exists(absolutePath)){
            console.log('Starting Hydra eye server\n');
            let config = getConfig(options, absolutePath);
            console.log('Workspace: [%s]\nRoot :%s',
                config.serverOptions.workSpacePath,
                JSON.stringify(fu.readDir(config.serverOptions.workSpacePath), 2));
            serve(config);
        } else {
            console.error("Cannot open directory [%s]",directory);
        }
    });

program
    .command('list <directory>')
    .description('describes the workspace')
    .action(function(directory, options){
        let absolutePath = path.resolve(directory);

        // Check directory
        if (fu.exists(absolutePath)){
            let config = getConfig(options, absolutePath);
            validateWorkspace(config);
        } else {
            console.error("Cannot open directory [%s]",directory);
        }
    });


program
    .command('*')
    .action(function(command){
        console.log('command %s not recognized (hes --help)',command);
    });

function getConfig(options, absolutePath) {
    let config = require("../config");
    config.eyeOptions.eyePath = program.eye;
    config.serverOptions.port = options.port;
    config.serverOptions.appEntrypoint = options.app;
    config.serverOptions.uriqa = options.uriqa;

    config.serverOptions.workSpacePath = absolutePath;
    config.serverOptions.verbose = program.verbose;
    return config;
}

if (!process.argv.slice(2).length) {
    program.outputHelp();
}

program.parse(process.argv);

// Only call when the config is set up
function serve(config){

    let http = require('http');
    let reasoner = require('../server/reasoning');

    reasoner.invokeEye(config.eyeOptions.eyePath + " --version")
        .then(function (result) {
            console.log(result.stderr);

            /**
             * Get port from environment and store in Express.
             */
            let app = require('../server/app')(config);
            let port = normalizePort(config.serverOptions.port);
            app.set('port', port);

            /**
             * Create HTTP server.
             */

            let server = http.createServer(app);

            /**
             * Listen on provided port, on all network interfaces.
             */
            server.listen(port);
            server.on('error', onError);
            server.on('listening', onListening);


            /**
             * Normalize a port into a number, string, or false.
             */
            function normalizePort(val) {
                let port = parseInt(val, 10);
                if (isNaN(port)) {
                    // named pipe
                    return val;
                }
                if (port >= 0) {
                    // port number
                    return port;
                }
                return false;
            }

            /**
             * Event listener for HTTP server "error" event.
             */

            function onError(error) {
                if (error.syscall !== 'listen') {
                    throw error;
                }
                let bind = typeof port === 'string'
                    ? 'Pipe ' + port
                    : 'Port ' + port;
                // handle specific listen errors with friendly messages
                switch (error.code) {
                    case 'EACCES':
                        console.error(bind + ' requires elevated privileges');
                        process.exit(1);
                        break;
                    case 'EADDRINUSE':
                        console.error(bind + ' is already in use');
                        process.exit(1);
                        break;
                    default:
                        throw error;
                }
            }

            /**
             * Event listener for HTTP server "listening" event.
             */

            function onListening() {
                let addr = server.address();
                let bind = typeof addr === 'string'
                    ? 'pipe ' + addr
                    : 'port ' + addr.port;
                console.log('Listening on ' + bind);
            }

        })
        .catch(function (error) {
            console.error("ERROR: could not start the reasoner [EYE_PATH:%s]", config.eyeOptions.eyePath);
            console.error(error)
        });

}


function validateWorkspace(config){

    // All files
    let context = new Context.byHostAndDataspacesUrl("example:3000",'/',config.serverOptions);
    let dsl_v1 = new DSL_V1(context);
    let dependencyGraph = dsl_v1.buildLocalDependencyGraph(config.serverOptions.workSpacePath);
    console.log(JSON.stringify(dependencyGraph,null,2));

    let pattern = "**";
    let all = {mark: true, sync:true, absolute:true, nodir:true, cwd:config.serverOptions.workSpacePath};
    const Glob = require("glob").Glob
    let allFiles = new Glob(pattern, all).found;

    for (let current of allFiles){
        // remove-utf8-bom, just in case
        let contents = fs.readFileSync(current,{ encoding: 'utf8' });
        if (contents.charCodeAt(0) === 0xFEFF) {
            contents = contents.substr(1);
            console.log('utf8-bom detected at ' + d + ', being removed');
            fs.outputFile(d, contents);
        }
    }

}
